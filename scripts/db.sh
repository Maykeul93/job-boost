#!/bin/bash

# Script de gestion de la base de donn√©es JobBoost

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'aide
show_help() {
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  start     - D√©marrer la base de donn√©es"
    echo "  stop      - Arr√™ter la base de donn√©es"
    echo "  restart   - Red√©marrer la base de donn√©es"
    echo "  reset     - R√©initialiser compl√®tement la base de donn√©es"
    echo "  status    - Afficher le statut des conteneurs"
    echo "  logs      - Afficher les logs de la base de donn√©es"
    echo "  backup    - Cr√©er une sauvegarde de la base de donn√©es"
    echo "  restore   - Restaurer une sauvegarde"
    echo "  seed      - Ex√©cuter le script de seed"
    echo "  studio    - Ouvrir Prisma Studio"
    echo "  help      - Afficher cette aide"
    echo ""
}

# Fonction pour d√©marrer la base de donn√©es
start_db() {
    echo -e "${BLUE}üöÄ D√©marrage de la base de donn√©es...${NC}"
    docker compose up -d
    echo -e "${GREEN}‚úÖ Base de donn√©es d√©marr√©e avec succ√®s!${NC}"
    
    # Attendre que PostgreSQL soit pr√™t
    echo -e "${YELLOW}‚è≥ Attente que PostgreSQL soit pr√™t...${NC}"
    sleep 5
    
    # V√©rifier la sant√©
    if docker compose exec postgres pg_isready -U postgres > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ PostgreSQL est pr√™t!${NC}"
    else
        echo -e "${RED}‚ùå PostgreSQL n'est pas pr√™t${NC}"
        exit 1
    fi
}

# Fonction pour arr√™ter la base de donn√©es
stop_db() {
    echo -e "${BLUE}üõë Arr√™t de la base de donn√©es...${NC}"
    docker compose down
    echo -e "${GREEN}‚úÖ Base de donn√©es arr√™t√©e!${NC}"
}

# Fonction pour red√©marrer la base de donn√©es
restart_db() {
    echo -e "${BLUE}üîÑ Red√©marrage de la base de donn√©es...${NC}"
    stop_db
    start_db
}

# Fonction pour r√©initialiser la base de donn√©es
reset_db() {
    echo -e "${YELLOW}‚ö†Ô∏è  ATTENTION: Cette action va supprimer toutes les donn√©es!${NC}"
    read -p "√ätes-vous s√ªr de vouloir continuer? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}üóëÔ∏è  Suppression de la base de donn√©es...${NC}"
        docker compose down -v
        docker compose up -d
        echo -e "${GREEN}‚úÖ Base de donn√©es r√©initialis√©e!${NC}"
        
        # Recr√©er les tables et les donn√©es
        echo -e "${BLUE}üîß Recr√©ation des tables...${NC}"
        npm run prisma:push
        echo -e "${BLUE}üå± Ex√©cution du script de seed...${NC}"
        npx tsx prisma/seed.ts
        echo -e "${GREEN}‚úÖ Base de donn√©es pr√™te!${NC}"
    else
        echo -e "${YELLOW}‚ùå Op√©ration annul√©e${NC}"
    fi
}

# Fonction pour afficher le statut
status_db() {
    echo -e "${BLUE}üìä Statut des conteneurs:${NC}"
    docker compose ps
    echo ""
    
    # V√©rifier la connexion √† PostgreSQL
    if docker compose exec postgres pg_isready -U postgres > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ PostgreSQL: Connect√©${NC}"
    else
        echo -e "${RED}‚ùå PostgreSQL: Non connect√©${NC}"
    fi
    
    # V√©rifier la connexion √† Redis
    if docker compose exec redis redis-cli ping > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Redis: Connect√©${NC}"
    else
        echo -e "${RED}‚ùå Redis: Non connect√©${NC}"
    fi
}

# Fonction pour afficher les logs
logs_db() {
    echo -e "${BLUE}üìã Logs de la base de donn√©es:${NC}"
    docker compose logs -f postgres
}

# Fonction pour cr√©er une sauvegarde
backup_db() {
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local backup_file="backup_jobboost_${timestamp}.sql"
    
    echo -e "${BLUE}üíæ Cr√©ation de la sauvegarde: ${backup_file}${NC}"
    docker compose exec postgres pg_dump -U postgres jobboost > "backups/${backup_file}"
    echo -e "${GREEN}‚úÖ Sauvegarde cr√©√©e: backups/${backup_file}${NC}"
}

# Fonction pour restaurer une sauvegarde
restore_db() {
    if [ -z "$1" ]; then
        echo -e "${RED}‚ùå Veuillez sp√©cifier le fichier de sauvegarde${NC}"
        echo "Usage: $0 restore <fichier_backup>"
        exit 1
    fi
    
    local backup_file="$1"
    if [ ! -f "$backup_file" ]; then
        echo -e "${RED}‚ùå Fichier de sauvegarde non trouv√©: $backup_file${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}‚ö†Ô∏è  ATTENTION: Cette action va √©craser la base de donn√©es actuelle!${NC}"
    read -p "√ätes-vous s√ªr de vouloir continuer? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}üîÑ Restauration de la sauvegarde...${NC}"
        docker compose exec -T postgres psql -U postgres jobboost < "$backup_file"
        echo -e "${GREEN}‚úÖ Sauvegarde restaur√©e!${NC}"
    else
        echo -e "${YELLOW}‚ùå Op√©ration annul√©e${NC}"
    fi
}

# Fonction pour ex√©cuter le seed
seed_db() {
    echo -e "${BLUE}üå± Ex√©cution du script de seed...${NC}"
    npx tsx prisma/seed.ts
    echo -e "${GREEN}‚úÖ Seed termin√©!${NC}"
}

# Fonction pour ouvrir Prisma Studio
studio_db() {
    echo -e "${BLUE}üé® Ouverture de Prisma Studio...${NC}"
    npx prisma studio
}

# Cr√©er le dossier backups s'il n'existe pas
mkdir -p backups

# Gestion des commandes
case "${1:-help}" in
    start)
        start_db
        ;;
    stop)
        stop_db
        ;;
    restart)
        restart_db
        ;;
    reset)
        reset_db
        ;;
    status)
        status_db
        ;;
    logs)
        logs_db
        ;;
    backup)
        backup_db
        ;;
    restore)
        restore_db "$2"
        ;;
    seed)
        seed_db
        ;;
    studio)
        studio_db
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo -e "${RED}‚ùå Commande inconnue: $1${NC}"
        show_help
        exit 1
        ;;
esac
